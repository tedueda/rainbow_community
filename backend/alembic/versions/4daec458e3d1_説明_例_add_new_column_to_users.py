"""説明（例: add new column to users）

Revision ID: 4daec458e3d1
Revises: 7bb188854c12
Create Date: 2025-10-25 14:48:16.072119

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

revision = '4daec458e3d1'
down_revision = '7bb188854c12'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.execute(sa.text('DROP INDEX IF EXISTS "idx_profile_images_profile_id"'))
    op.execute(sa.text('DROP INDEX IF EXISTS "ix_matching_profile_images_id"'))
    op.execute(sa.text('DROP TABLE IF EXISTS "matching_profile_images"'))
    
    conn = op.get_bind()
    columns_to_drop = ['field_visibility', 'avatar_url', 'meeting_style', 'image_public']
    for col in columns_to_drop:
        result = conn.execute(sa.text(
            f"SELECT column_name FROM information_schema.columns "
            f"WHERE table_name='matching_profiles' AND column_name='{col}'"
        )).fetchone()
        if result:
            op.drop_column('matching_profiles', col)
    
    op.execute(sa.text('DROP INDEX IF EXISTS "ix_post_media_post_id"'))
    
    result = conn.execute(sa.text(
        "SELECT constraint_name FROM information_schema.table_constraints "
        "WHERE table_name='posts' AND constraint_name='posts_slug_key'"
    )).fetchone()
    if result:
        op.drop_constraint('posts_slug_key', 'posts', type_='unique')
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_unique_constraint(op.f('posts_slug_key'), 'posts', ['slug'], postgresql_nulls_not_distinct=False)
    op.create_index(op.f('ix_post_media_post_id'), 'post_media', ['post_id'], unique=False)
    op.add_column('matching_profiles', sa.Column('image_public', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=False))
    op.add_column('matching_profiles', sa.Column('meeting_style', sa.VARCHAR(length=50), autoincrement=False, nullable=True))
    op.add_column('matching_profiles', sa.Column('avatar_url', sa.VARCHAR(length=500), autoincrement=False, nullable=True))
    op.add_column('matching_profiles', sa.Column('field_visibility', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True))
    op.create_table('matching_profile_images',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('profile_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('image_url', sa.VARCHAR(length=500), autoincrement=False, nullable=False),
    sa.Column('display_order', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.CheckConstraint('display_order >= 0 AND display_order < 5', name=op.f('check_order_range')),
    sa.ForeignKeyConstraint(['profile_id'], ['matching_profiles.user_id'], name=op.f('matching_profile_images_profile_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('matching_profile_images_pkey')),
    sa.UniqueConstraint('profile_id', 'display_order', name=op.f('unique_profile_order'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_index(op.f('ix_matching_profile_images_id'), 'matching_profile_images', ['id'], unique=False)
    op.create_index(op.f('idx_profile_images_profile_id'), 'matching_profile_images', ['profile_id'], unique=False)
    # ### end Alembic commands ###

"""sync with tokyo rds schema

Revision ID: 68253ac0121c
Revises: 20250926_0001
Create Date: 2025-10-07 02:44:09.682783

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql
from sqlalchemy import Inspector

revision = '68253ac0121c'
down_revision = '20250926_0001'
branch_labels = None
depends_on = None


def upgrade():
    conn = op.get_bind()
    insp = Inspector.from_engine(conn)
    
    if not insp.has_table('users') or not insp.has_table('posts'):
        return
    
    # ### commands auto generated by Alembic - please adjust! ###
    if insp.has_table('healthcheck'):
        op.drop_table('healthcheck')
    op.drop_index(op.f('idx_comments_post_created'), table_name='comments', if_exists=True)
    op.drop_constraint(op.f('comments_post_id_fkey'), 'comments', type_='foreignkey')
    op.drop_constraint(op.f('comments_user_id_fkey'), 'comments', type_='foreignkey')
    op.create_foreign_key(None, 'comments', 'posts', ['post_id'], ['id'])
    op.create_foreign_key(None, 'comments', 'users', ['user_id'], ['id'])
    op.drop_index(op.f('idx_follows_followee'), table_name='follows', if_exists=True)
    op.drop_index(op.f('idx_follows_follower'), table_name='follows', if_exists=True)
    op.drop_index(op.f('idx_media_assets_user'), table_name='media_assets', if_exists=True)
    op.drop_index(op.f('idx_notifications_user_read_created'), table_name='notifications', if_exists=True)
    op.drop_index(op.f('idx_point_events_user'), table_name='point_events', if_exists=True)
    op.drop_constraint(op.f('point_events_user_id_fkey'), 'point_events', type_='foreignkey')
    op.create_foreign_key(None, 'point_events', 'users', ['user_id'], ['id'])
    op.alter_column('post_tags', 'post_id',
               existing_type=sa.BIGINT(),
               type_=sa.Integer(),
               existing_nullable=False)
    op.alter_column('post_tags', 'tag_id',
               existing_type=sa.BIGINT(),
               type_=sa.Integer(),
               existing_nullable=False)
    op.drop_constraint(op.f('post_tags_post_id_fkey'), 'post_tags', type_='foreignkey')
    op.drop_constraint(op.f('post_tags_tag_id_fkey'), 'post_tags', type_='foreignkey')
    op.create_foreign_key(None, 'post_tags', 'posts', ['post_id'], ['id'])
    op.create_foreign_key(None, 'post_tags', 'tags', ['tag_id'], ['id'])
    op.alter_column('posts', 'id',
               existing_type=sa.BIGINT(),
               type_=sa.Integer(),
               existing_nullable=False,
               autoincrement=True,
               existing_server_default=sa.text("nextval('posts_id_seq'::regclass)"))
    op.alter_column('posts', 'user_id',
               existing_type=sa.BIGINT(),
               type_=sa.Integer(),
               existing_nullable=False)
    op.alter_column('posts', 'title',
               existing_type=sa.TEXT(),
               type_=sa.String(length=200),
               existing_nullable=True)
    op.alter_column('posts', 'visibility',
               existing_type=sa.VARCHAR(length=20),
               server_default=None,
               existing_nullable=True)
    op.alter_column('posts', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('now()'))
    op.drop_index(op.f('idx_posts_user_created'), table_name='posts', if_exists=True)
    op.execute('CREATE INDEX IF NOT EXISTS ix_posts_id ON posts (id)')
    op.drop_constraint(op.f('posts_user_id_fkey'), 'posts', type_='foreignkey')
    op.create_foreign_key(None, 'posts', 'users', ['user_id'], ['id'])
    op.drop_constraint(op.f('uq_profiles_user_id'), 'profiles', type_='unique')
    op.drop_index(op.f('idx_reactions_target'), table_name='reactions', if_exists=True)
    op.drop_constraint(op.f('reactions_user_id_fkey'), 'reactions', type_='foreignkey')
    op.create_foreign_key(None, 'reactions', 'users', ['user_id'], ['id'])
    op.drop_index(op.f('idx_reports_status'), table_name='reports', if_exists=True)
    op.add_column('tags', sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True))
    op.alter_column('tags', 'id',
               existing_type=sa.BIGINT(),
               type_=sa.Integer(),
               existing_nullable=False,
               autoincrement=True,
               existing_server_default=sa.text("nextval('tags_id_seq'::regclass)"))
    op.alter_column('tags', 'name',
               existing_type=postgresql.CITEXT(),
               type_=sa.String(),
               existing_nullable=False)
    op.execute('CREATE INDEX IF NOT EXISTS ix_tags_id ON tags (id)')
    op.alter_column('users', 'id',
               existing_type=sa.BIGINT(),
               type_=sa.Integer(),
               existing_nullable=False,
               autoincrement=True,
               existing_server_default=sa.text("nextval('users_id_seq'::regclass)"))
    op.alter_column('users', 'email',
               existing_type=postgresql.CITEXT(),
               type_=sa.String(),
               existing_nullable=False)
    op.alter_column('users', 'password_hash',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               nullable=False)
    op.alter_column('users', 'display_name',
               existing_type=sa.TEXT(),
               type_=sa.String(length=100),
               existing_nullable=False)
    op.alter_column('users', 'membership_type',
               existing_type=sa.VARCHAR(length=20),
               server_default=None,
               existing_nullable=True)
    op.alter_column('users', 'is_active',
               existing_type=sa.BOOLEAN(),
               server_default=None,
               existing_nullable=True)
    op.alter_column('users', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('now()'))
    op.drop_constraint(op.f('users_email_key'), 'users', type_='unique')
    op.drop_index(op.f('users_email_unique_lower'), table_name='users', if_exists=True)
    op.execute('CREATE UNIQUE INDEX IF NOT EXISTS ix_users_email ON users (email)')
    op.execute('CREATE INDEX IF NOT EXISTS ix_users_id ON users (id)')
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_users_id'), table_name='users')
    op.drop_index(op.f('ix_users_email'), table_name='users')
    op.create_index(op.f('users_email_unique_lower'), 'users', [sa.literal_column('lower(email::text)')], unique=True)
    op.create_unique_constraint(op.f('users_email_key'), 'users', ['email'], postgresql_nulls_not_distinct=False)
    op.alter_column('users', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('users', 'is_active',
               existing_type=sa.BOOLEAN(),
               server_default=sa.text('true'),
               existing_nullable=True)
    op.alter_column('users', 'membership_type',
               existing_type=sa.VARCHAR(length=20),
               server_default=sa.text("'premium'::character varying"),
               existing_nullable=True)
    op.alter_column('users', 'display_name',
               existing_type=sa.String(length=100),
               type_=sa.TEXT(),
               existing_nullable=False)
    op.alter_column('users', 'password_hash',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               nullable=True)
    op.alter_column('users', 'email',
               existing_type=sa.String(),
               type_=postgresql.CITEXT(),
               existing_nullable=False)
    op.alter_column('users', 'id',
               existing_type=sa.Integer(),
               type_=sa.BIGINT(),
               existing_nullable=False,
               autoincrement=True,
               existing_server_default=sa.text("nextval('users_id_seq'::regclass)"))
    op.drop_index(op.f('ix_tags_id'), table_name='tags')
    op.alter_column('tags', 'name',
               existing_type=sa.String(),
               type_=postgresql.CITEXT(),
               existing_nullable=False)
    op.alter_column('tags', 'id',
               existing_type=sa.Integer(),
               type_=sa.BIGINT(),
               existing_nullable=False,
               autoincrement=True,
               existing_server_default=sa.text("nextval('tags_id_seq'::regclass)"))
    op.drop_column('tags', 'created_at')
    op.create_index(op.f('idx_reports_status'), 'reports', ['status', sa.literal_column('created_at DESC')], unique=False)
    op.drop_constraint(None, 'reactions', type_='foreignkey')
    op.create_foreign_key(op.f('reactions_user_id_fkey'), 'reactions', 'users', ['user_id'], ['id'], ondelete='CASCADE')
    op.create_index(op.f('idx_reactions_target'), 'reactions', ['target_type', 'target_id'], unique=False)
    op.create_unique_constraint(op.f('uq_profiles_user_id'), 'profiles', ['user_id'], postgresql_nulls_not_distinct=False)
    op.drop_constraint(None, 'posts', type_='foreignkey')
    op.create_foreign_key(op.f('posts_user_id_fkey'), 'posts', 'users', ['user_id'], ['id'], ondelete='CASCADE')
    op.drop_index(op.f('ix_posts_id'), table_name='posts')
    op.create_index(op.f('idx_posts_user_created'), 'posts', ['user_id', sa.literal_column('created_at DESC')], unique=False)
    op.alter_column('posts', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('posts', 'visibility',
               existing_type=sa.VARCHAR(length=20),
               server_default=sa.text("'public'::character varying"),
               existing_nullable=True)
    op.alter_column('posts', 'title',
               existing_type=sa.String(length=200),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.alter_column('posts', 'user_id',
               existing_type=sa.Integer(),
               type_=sa.BIGINT(),
               existing_nullable=False)
    op.alter_column('posts', 'id',
               existing_type=sa.Integer(),
               type_=sa.BIGINT(),
               existing_nullable=False,
               autoincrement=True,
               existing_server_default=sa.text("nextval('posts_id_seq'::regclass)"))
    op.drop_constraint(None, 'post_tags', type_='foreignkey')
    op.drop_constraint(None, 'post_tags', type_='foreignkey')
    op.create_foreign_key(op.f('post_tags_tag_id_fkey'), 'post_tags', 'tags', ['tag_id'], ['id'], ondelete='CASCADE')
    op.create_foreign_key(op.f('post_tags_post_id_fkey'), 'post_tags', 'posts', ['post_id'], ['id'], ondelete='CASCADE')
    op.alter_column('post_tags', 'tag_id',
               existing_type=sa.Integer(),
               type_=sa.BIGINT(),
               existing_nullable=False)
    op.alter_column('post_tags', 'post_id',
               existing_type=sa.Integer(),
               type_=sa.BIGINT(),
               existing_nullable=False)
    op.drop_constraint(None, 'point_events', type_='foreignkey')
    op.create_foreign_key(op.f('point_events_user_id_fkey'), 'point_events', 'users', ['user_id'], ['id'], ondelete='CASCADE')
    op.create_index(op.f('idx_point_events_user'), 'point_events', ['user_id', sa.literal_column('created_at DESC')], unique=False)
    op.create_index(op.f('idx_notifications_user_read_created'), 'notifications', ['user_id', 'is_read', sa.literal_column('created_at DESC')], unique=False)
    op.create_index(op.f('idx_media_assets_user'), 'media_assets', ['user_id'], unique=False)
    op.create_index(op.f('idx_follows_follower'), 'follows', ['follower_user_id'], unique=False)
    op.create_index(op.f('idx_follows_followee'), 'follows', ['followee_user_id'], unique=False)
    op.drop_constraint(None, 'comments', type_='foreignkey')
    op.drop_constraint(None, 'comments', type_='foreignkey')
    op.create_foreign_key(op.f('comments_user_id_fkey'), 'comments', 'users', ['user_id'], ['id'], ondelete='CASCADE')
    op.create_foreign_key(op.f('comments_post_id_fkey'), 'comments', 'posts', ['post_id'], ['id'], ondelete='CASCADE')
    op.create_index(op.f('idx_comments_post_created'), 'comments', ['post_id', 'created_at'], unique=False)
    op.create_table('healthcheck',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('healthcheck_pkey'))
    )
    # ### end Alembic commands ###
